{"topicSections":[{"identifiers":["doc:\/\/uint128.UInt128\/documentation\/UInt128\/Int128","doc:\/\/uint128.UInt128\/documentation\/UInt128\/UInt128"],"title":"Structures","generated":true,"anchor":"Structures"},{"identifiers":["doc:\/\/uint128.UInt128\/documentation\/UInt128\/Swift"],"anchor":"Extended-Modules","generated":true,"title":"Extended Modules"}],"identifier":{"url":"doc:\/\/uint128.UInt128\/documentation\/UInt128","interfaceLanguage":"swift"},"sections":[],"metadata":{"symbolKind":"module","title":"UInt128","roleHeading":"Framework","modules":[{"name":"UInt128"}],"role":"collection","externalID":"UInt128"},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[[]]},"primaryContentSections":[{"content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"If you’re working with macOS 15.0+, iOS 18.0+, or tvOS 18.0+, you won’t need"},{"type":"text","text":" "},{"type":"text","text":"this package any more because Int128\/UInt128 are built into those OSes.  Just"},{"text":" ","type":"text"},{"text":"remove the imports of this package and you should be good.  If you use the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"internals of this package (low, high) and init(low, high), these will need"},{"text":" ","type":"text"},{"type":"text","text":"to have underscores prefixed on the arguments. Apple does this to indicate internal variables"},{"text":" ","type":"text"},{"type":"text","text":"and methods that you shouldn’t use unless you know what you’re doing."}],"type":"paragraph"},{"inlineContent":[{"text":"This package is usually around ten times faster than other UInt128 implementations and roughly the same","type":"text"},{"type":"text","text":" "},{"text":"speed as Apple’s implementation. If you find something faster, please let me know.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"UInt128","type":"codeVoice"},{"text":" package name is a bit of a misnomer since it actually includes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"two datatypes:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/uint128.UInt128\/documentation\/UInt128\/UInt128"},{"type":"text","text":" which is an unsigned 128-bit integer type, and"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/uint128.UInt128\/documentation\/UInt128\/Int128"},{"type":"text","text":" which is a signed 128-bit integer type."}]}]}]},{"text":"Details","anchor":"Details","type":"heading","level":2},{"type":"heading","level":3,"text":"Protocol Support","anchor":"Protocol-Support"},{"type":"paragraph","inlineContent":[{"type":"text","text":"These integer types are compliant with the following protocols:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"UnsignedInteger\/SignedInteger"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"BinaryInteger"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"FixedWidthInteger"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Numeric"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"AdditiveArithmetic","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"ExpressibleByIntegerLiteral","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"ExpressibleByStringLiteral","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"LosslessStringConvertible"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"CustomStringConvertible"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"CustomDebugStringConvertible","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Comparable"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Equatable"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Strideable"}]}]},{"content":[{"inlineContent":[{"text":"Hashable","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Sendable","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Codable"}],"type":"paragraph"}]}],"type":"orderedList"},{"anchor":"Usage","type":"heading","text":"Usage","level":3},{"inlineContent":[{"text":"Since this library fully implements the UnsignedInteger or SignedInteger protocols,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can use these data types just like any other native integer data type. For numbers larger"},{"type":"text","text":" "},{"text":"than ","type":"text"},{"type":"codeVoice","code":"UInt.max"},{"type":"text","text":", you can enter numbers directly as literals (see example).  If you prefer,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"init(high: UInt64, low: UInt64)"},{"type":"text","text":", or the "},{"type":"codeVoice","code":"init(_ source: String, radix: Int)"},{"type":"text","text":" initializers"},{"text":" ","type":"text"},{"text":"can also be used to create a UInt128\/Int128. A string can be in any radix up to base 36","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including binary, octal, decimal or hexadecimal, by using a corresponding "},{"code":"radix","type":"codeVoice"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"argument. Strings ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"cannot"}]},{"text":" contain spaces, underscores, or non-radix digits. Illegal","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"input strings will return nil (previously they quietly returned 0).  Note: This is probably confusing"},{"text":" ","type":"text"},{"text":"to newbies who may want to use underscores to separate digit groups as they","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can do with literal integers (e.g., 123_456), but it is the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Apple way"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Fortunately, with big literal number support (aka ","type":"text"},{"type":"codeVoice","code":"StaticBigInt"},{"type":"text","text":"), you never"},{"type":"text","text":" "},{"type":"text","text":"need to use string initializers again, unless you need oddball radices."}],"type":"paragraph"},{"inlineContent":[{"text":"For example:","type":"text"}],"type":"paragraph"},{"code":["  let uInt128ByString = UInt128(\"ffaabbcc00129823fa9a12d4aa87f498\", radix:16)!","  let uInt128ByLiteral: UInt128 = 0xffaa_bbcc_0012_9823_fa9a_12d4_aa87_f498","  let uInt128ByInteger: UInt128 = 1234"],"syntax":"Swift","type":"codeListing"},{"level":3,"text":"Testing","type":"heading","anchor":"Testing"},{"type":"paragraph","inlineContent":[{"text":"Some tests are included (many from Joel Gerber’s great UInt128 implementation)","type":"text"},{"text":" ","type":"text"},{"text":"to verify that the source files are intact and working correctly.  Please","type":"text"},{"type":"text","text":" "},{"type":"text","text":"let me know of any testing failures. Please forward to me any new tests that"},{"type":"text","text":" "},{"type":"text","text":"you decide to add."}]}],"kind":"content"}],"abstract":[{"text":"A 128-bit unsigned\/signed integer implementation with optimized multiplication, division, and string conversions.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The user interface has been changed to be in sync with Apple’s new UInt128\/Int128 data types."}],"variants":[{"paths":["\/documentation\/uint128"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","references":{"doc://uint128.UInt128/documentation/UInt128/UInt128":{"role":"symbol","navigatorTitle":[{"text":"UInt128","kind":"identifier"}],"abstract":[{"type":"text","text":"A 128-bit unsigned integer value type."}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UInt128"}],"type":"topic","identifier":"doc:\/\/uint128.UInt128\/documentation\/UInt128\/UInt128","url":"\/documentation\/uint128\/uint128","title":"UInt128"},"doc://uint128.UInt128/documentation/UInt128/Int128":{"url":"\/documentation\/uint128\/int128","abstract":[{"type":"text","text":"A 128-bit signed integer value type."}],"type":"topic","title":"Int128","role":"symbol","navigatorTitle":[{"text":"Int128","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Int128"}],"identifier":"doc:\/\/uint128.UInt128\/documentation\/UInt128\/Int128"},"doc://uint128.UInt128/documentation/UInt128":{"url":"\/documentation\/uint128","kind":"symbol","type":"topic","role":"collection","title":"UInt128","abstract":[{"type":"text","text":"A 128-bit unsigned\/signed integer implementation with optimized multiplication, division, and string conversions."},{"type":"text","text":" "},{"type":"text","text":"The user interface has been changed to be in sync with Apple’s new UInt128\/Int128 data types."}],"identifier":"doc:\/\/uint128.UInt128\/documentation\/UInt128"},"doc://uint128.UInt128/documentation/UInt128/Swift":{"title":"Swift","kind":"symbol","abstract":[],"role":"collection","url":"\/documentation\/uint128\/swift","type":"topic","identifier":"doc:\/\/uint128.UInt128\/documentation\/UInt128\/Swift"}}}